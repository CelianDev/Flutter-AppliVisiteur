import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:shimmer/shimmer.dart';

class DashboardView extends StatefulWidget {
  const DashboardView({super.key});

  @override
  State<DashboardView> createState() => _DashboardViewState();
}

class _DashboardViewState extends State<DashboardView> {
  bool _isLoading = true;
  
  // Méthode pour naviguer vers un onglet spécifique
  void _navigateToTab(int index) {
    // Utiliser Navigator.of(context).pushNamedAndRemoveUntil pour effacer la pile de navigation
    // et revenir à la page d'accueil avec l'index spécifié
    Navigator.of(context).pushNamedAndRemoveUntil(
      '/', // Route vers la page d'accueil
      (route) => false, // Supprime toutes les routes précédentes de la pile
      arguments: index, // Index de l'onglet à afficher
    );
  }
  
  @override
  void initState() {
    super.initState();
    // Simuler un chargement des données
    Future.delayed(const Duration(seconds: 1), () {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDesktop = MediaQuery.of(context).size.width >= 1024;
    
    return Scaffold(
      body: _isLoading 
        ? _buildLoadingShimmer(isDesktop)
        : SingleChildScrollView(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // En-tête avec salutation et date
                _buildHeader(theme),
                const SizedBox(height: 32),
                
                // Cartes de statistiques
                _buildStatCards(theme, isDesktop),
                const SizedBox(height: 32),
                
                // Graphique d'activité
                _buildActivityChart(theme),
                const SizedBox(height: 32),
                
                // Modules rapides
                Text(
                  'Accès rapides',
                  style: theme.textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                _buildQuickAccessModules(theme, isDesktop),
              ],
            ),
          ),
    );
  }
  
  // Widget d'en-tête avec salutation et date
  Widget _buildHeader(ThemeData theme) {
    final now = DateTime.now();
    final greeting = _getGreeting(now.hour);
    final dateFormat = '${_getDayName(now.weekday)} ${now.day} ${_getMonthName(now.month)} ${now.year}';
    
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                greeting,
                style: GoogleFonts.poppins(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.primary,
                ),
              ).animate().fadeIn(duration: 600.ms).slideX(begin: -0.2),
              const SizedBox(height: 8),
              Text(
                'Voici un aperçu de votre activité',
                style: theme.textTheme.bodyLarge?.copyWith(
                  color: theme.colorScheme.onSurface.withOpacity(0.7),
                ),
              ).animate().fadeIn(duration: 600.ms, delay: 200.ms).slideX(begin: -0.2),
            ],
          ),
        ),
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            color: theme.colorScheme.surface,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 10,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Row(
            children: [
              Icon(
                Icons.calendar_today,
                size: 18,
                color: theme.colorScheme.primary,
              ),
              const SizedBox(width: 8),
              Text(
                dateFormat,
                style: theme.textTheme.bodyMedium,
              ),
            ],
          ),
        ).animate().fadeIn(duration: 600.ms, delay: 400.ms),
      ],
    );
  }
  
  // Cartes de statistiques
  Widget _buildStatCards(ThemeData theme, bool isDesktop) {
    final statCards = [
      {
        'title': 'Comptes rendus',
        'value': '24',
        'change': '+12%',
        'icon': Icons.assignment,
        'color': theme.colorScheme.primary,
        'isPositive': true,
      },
      {
        'title': 'Visites prévues',
        'value': '8',
        'change': 'Cette semaine',
        'icon': Icons.calendar_month,
        'color': Colors.orange,
        'isPositive': null,
      },
      {
        'title': 'Médicaments',
        'value': '42',
        'change': '+5%',
        'icon': Icons.medication,
        'color': Colors.green,
        'isPositive': true,
      },
      {
        'title': 'Praticiens',
        'value': '18',
        'change': '-2%',
        'icon': Icons.people,
        'color': Colors.purple,
        'isPositive': false,
      },
    ];
    
    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: isDesktop ? 4 : 2,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
        childAspectRatio: 1.5,
      ),
      itemCount: statCards.length,
      itemBuilder: (context, index) {
        final card = statCards[index];
        return InkWell(
          onTap: () {
            // Rediriger vers l'onglet correspondant
            switch(index) {
              case 0: // Comptes rendus
                // Naviguer vers l'onglet Comptes Rendus (index 2)
                _navigateToTab(2);
                break;
              case 1: // Visites prévues
                // Naviguer vers l'onglet Nouveau compte rendu (index 1)
                _navigateToTab(1);
                break;
              case 2: // Médicaments
                // Pour l'instant, rediriger vers l'onglet Comptes Rendus
                _navigateToTab(2);
                break;
              case 3: // Praticiens
                // Pour l'instant, rediriger vers l'onglet Comptes Rendus
                _navigateToTab(2);
                break;
            }
          },
          borderRadius: BorderRadius.circular(16),
          child: Card(
            elevation: 0,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
            color: theme.colorScheme.surface,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      card['title'] as String,
                      style: theme.textTheme.titleSmall?.copyWith(
                        color: theme.colorScheme.onSurface.withOpacity(0.7),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: (card['color'] as Color).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        card['icon'] as IconData,
                        color: card['color'] as Color,
                        size: 20,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Text(
                  card['value'] as String,
                  style: GoogleFonts.poppins(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Row(
                  children: [
                    if (card['isPositive'] != null)
                      Icon(
                        card['isPositive'] as bool
                            ? Icons.arrow_upward
                            : Icons.arrow_downward,
                        color: card['isPositive'] as bool ? Colors.green : Colors.red,
                        size: 14,
                      ),
                    const SizedBox(width: 4),
                    Text(
                      card['change'] as String,
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: card['isPositive'] == null
                            ? theme.colorScheme.onSurface.withOpacity(0.6)
                            : (card['isPositive'] as bool ? Colors.green : Colors.red),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ).animate().fadeIn(duration: 600.ms, delay: (100 * index).ms).scale(begin: const Offset(0.9, 0.9), end: const Offset(1.0, 1.0));
      },
    );
  }
  
  // Graphique d'activité simplifié
  Widget _buildActivityChart(ThemeData theme) {
    // Données pour les deux séries
    final List<double> seriesCompteRendus = [35, 42, 38, 50, 45, 60, 65, 70, 72, 78, 85, 82];
    final List<double> seriesVisites = [20, 25, 22, 30, 28, 35, 40, 45, 48, 52, 60, 58];
    const List<String> months = ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Août', 'Sep', 'Oct', 'Nov', 'Déc'];
    
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      color: theme.colorScheme.surface,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Activité mensuelle',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: theme.colorScheme.primary.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Text(
                    '2023',
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: theme.colorScheme.primary,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 24),
            SizedBox(
              height: 200,
              child: Column(
                children: [
                  Expanded(
                    child: CustomPaint(
                      size: const Size(double.infinity, double.infinity),
                      painter: SimpleChartPainter(
                        seriesCompteRendus: seriesCompteRendus,
                        seriesVisites: seriesVisites,
                        primaryColor: theme.colorScheme.primary,
                        secondaryColor: Colors.orange,
                        gridColor: theme.dividerColor.withOpacity(0.2),
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  SizedBox(
                    height: 20,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: List.generate(
                        months.length,
                        (index) => Text(
                          months[index],
                          style: theme.textTheme.bodySmall,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                _buildChartLegend(theme.colorScheme.primary, 'Comptes rendus'),
                const SizedBox(width: 24),
                _buildChartLegend(Colors.orange, 'Visites'),
              ],
            ),
          ],
        ),
      ),
    ).animate().fadeIn(duration: 800.ms, delay: 400.ms);
  }
  
  // Légende du graphique
  Widget _buildChartLegend(Color color, String label) {
    return Row(
      children: [
        Container(
          width: 12,
          height: 12,
          decoration: BoxDecoration(
            color: color,
            borderRadius: BorderRadius.circular(3),
          ),
        ),
        const SizedBox(width: 8),
        Text(label),
      ],
    );
  }
  

  
  // Modules d'accès rapide
  Widget _buildQuickAccessModules(ThemeData theme, bool isDesktop) {
    final modules = [
      {
        'title': 'Nouveau CR',
        'icon': Icons.add_circle_outline,
        'color': theme.colorScheme.primary,
        'route': '/compte-rendu/create',
      },
      {
        'title': 'Mes CRs',
        'icon': Icons.assignment_outlined,
        'color': Colors.orange,
        'route': '/',
        'args': 2,
      },
      {
        'title': 'Praticiens',
        'icon': Icons.people_outline,
        'color': Colors.purple,
        'route': null,
      },
      {
        'title': 'Médicaments',
        'icon': Icons.medication_outlined,
        'color': Colors.green,
        'route': null,
      },
      {
        'title': 'Statistiques',
        'icon': Icons.bar_chart,
        'color': Colors.blue,
        'route': null,
      },
      {
        'title': 'Paramètres',
        'icon': Icons.settings_outlined,
        'color': Colors.grey,
        'route': null,
      },
    ];
    
    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: isDesktop ? 6 : 3,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
        childAspectRatio: 1.0,
      ),
      itemCount: modules.length,
      itemBuilder: (context, index) {
        final module = modules[index];
        return Card(
          elevation: 0,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          color: theme.colorScheme.surface,
          child: InkWell(
            borderRadius: BorderRadius.circular(16),
            onTap: () {
              final route = module['route'];
              if (route != null) {
                if (module['args'] != null) {
                  Navigator.pushNamed(context, route as String, arguments: module['args']);
                } else {
                  Navigator.pushNamed(context, route as String);
                }
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('${module['title']} : Fonctionnalité à venir')),
                );
              }
            },
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: (module['color'] as Color).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    module['icon'] as IconData,
                    color: module['color'] as Color,
                    size: 28,
                  ),
                ),
                const SizedBox(height: 12),
                Text(
                  module['title'] as String,
                  style: theme.textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.w500,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ).animate().fadeIn(duration: 600.ms, delay: (100 * index).ms).scale(begin: const Offset(0.9, 0.9), end: const Offset(1.0, 1.0));
      },
    );
  }
  
  // Widget de chargement avec shimmer
  Widget _buildLoadingShimmer(bool isDesktop) {
    return Padding(
      padding: const EdgeInsets.all(24.0),
      child: Shimmer.fromColors(
        baseColor: Colors.grey[300]!,
        highlightColor: Colors.grey[100]!,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // En-tête
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 200,
                      height: 30,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Container(
                      width: 150,
                      height: 15,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(4),
                      ),
                    ),
                  ],
                ),
                Container(
                  width: 120,
                  height: 30,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(16),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 32),
            
            // Cartes de statistiques
            GridView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: isDesktop ? 4 : 2,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                childAspectRatio: 1.5,
              ),
              itemCount: 4,
              itemBuilder: (context, index) {
                return Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(16),
                  ),
                );
              },
            ),
            const SizedBox(height: 32),
            
            // Graphique
            Container(
              height: 250,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
              ),
            ),
            const SizedBox(height: 32),
            
            // Titre modules
            Container(
              width: 150,
              height: 24,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            const SizedBox(height: 16),
            
            // Modules
            GridView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: isDesktop ? 6 : 3,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                childAspectRatio: 1.0,
              ),
              itemCount: 6,
              itemBuilder: (context, index) {
                return Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(16),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
  
  // Fonctions utilitaires
  String _getGreeting(int hour) {
    if (hour < 12) {
      return 'Bonjour !';  
    } else if (hour < 18) {
      return 'Bon après-midi !';  
    } else {
      return 'Bonsoir !';  
    }
  }
  
  String _getDayName(int weekday) {
    const days = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
    return days[weekday - 1];
  }
  
  String _getMonthName(int month) {
    const months = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'];
    return months[month - 1];
  }
}

// Classe pour dessiner le graphique personnalisé
class SimpleChartPainter extends CustomPainter {
  final List<double> seriesCompteRendus;
  final List<double> seriesVisites;
  final Color primaryColor;
  final Color secondaryColor;
  final Color gridColor;
  
  SimpleChartPainter({
    required this.seriesCompteRendus,
    required this.seriesVisites,
    required this.primaryColor,
    required this.secondaryColor,
    required this.gridColor,
  });
  
  @override
  void paint(Canvas canvas, Size size) {
    final double maxValue = 100; // Valeur maximale pour l'échelle Y
    final double width = size.width;
    final double height = size.height;
    final double horizontalStep = width / (seriesCompteRendus.length - 1);
    
    // Dessiner les lignes horizontales de la grille
    final gridPaint = Paint()
      ..color = gridColor
      ..strokeWidth = 1
      ..style = PaintingStyle.stroke;
    
    for (int i = 1; i <= 5; i++) {
      final y = height - (height * (i * 20) / maxValue);
      canvas.drawLine(Offset(0, y), Offset(width, y), gridPaint);
    }
    
    // Dessiner la première série (Comptes rendus)
    _drawSeries(
      canvas, 
      size, 
      seriesCompteRendus, 
      primaryColor, 
      maxValue,
      horizontalStep,
    );
    
    // Dessiner la deuxième série (Visites)
    _drawSeries(
      canvas, 
      size, 
      seriesVisites, 
      secondaryColor, 
      maxValue,
      horizontalStep,
    );
  }
  
  void _drawSeries(Canvas canvas, Size size, List<double> data, Color color, double maxValue, double horizontalStep) {
    final path = Path();
    final fillPath = Path();
    
    // Configurer les pinceaux
    final linePaint = Paint()
      ..color = color
      ..strokeWidth = 3
      ..style = PaintingStyle.stroke
      ..strokeCap = StrokeCap.round
      ..strokeJoin = StrokeJoin.round;
    
    final fillPaint = Paint()
      ..color = color.withOpacity(0.1)
      ..style = PaintingStyle.fill;
    
    // Créer le chemin pour la ligne
    for (int i = 0; i < data.length; i++) {
      final x = i * horizontalStep;
      final y = size.height - (size.height * data[i] / maxValue);
      
      if (i == 0) {
        path.moveTo(x, y);
        fillPath.moveTo(x, y);
      } else {
        // Utiliser une courbe de Bézier pour lisser la ligne
        final prevX = (i - 1) * horizontalStep;
        final prevY = size.height - (size.height * data[i - 1] / maxValue);
        
        final controlX1 = prevX + (x - prevX) / 2;
        final controlX2 = prevX + (x - prevX) / 2;
        
        path.cubicTo(controlX1, prevY, controlX2, y, x, y);
        fillPath.cubicTo(controlX1, prevY, controlX2, y, x, y);
      }
    }
    
    // Compléter le chemin de remplissage
    fillPath.lineTo(size.width, size.height);
    fillPath.lineTo(0, size.height);
    fillPath.close();
    
    // Dessiner le remplissage et la ligne
    canvas.drawPath(fillPath, fillPaint);
    canvas.drawPath(path, linePaint);
    
    // Dessiner les points
    final dotPaint = Paint()
      ..color = color
      ..style = PaintingStyle.fill;
    
    for (int i = 0; i < data.length; i++) {
      final x = i * horizontalStep;
      final y = size.height - (size.height * data[i] / maxValue);
      canvas.drawCircle(Offset(x, y), 3, dotPaint);
    }
  }
  
  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}
